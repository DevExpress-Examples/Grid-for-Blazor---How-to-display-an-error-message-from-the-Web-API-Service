@page "/"


<h1>Editing</h1>

@using System.Text.Json
@inject HttpClient HttpClient

<h3>Change the unit price to a negative value to display the error from the Web API service.</h3>

<DxGrid Data="Products" KeyFieldName="ProductId"
        EditNewRowPosition="GridEditNewRowPosition.Bottom"
        EditStart="Grid_EditStart"
        EditModelSaving="Grid_EditModelSaving"
        DataItemDeleting="Grid_DataItemDeleting">
    <Columns>
        <DxGridCommandColumn />
        <DxGridDataColumn FieldName="ProductName" />
        <DxGridDataColumn FieldName="UnitPrice" />
        <DxGridDataColumn FieldName="Discontinued" />
    </Columns>
    <EditFormTemplate>
        @{
            Products prod = context.EditModel as Products;
        }

        <div>Name</div>
        <DxTextBox @bind-Text="prod.ProductName" />

        <div>Price</div>
        <DxSpinEdit @bind-Value="prod.UnitPrice" />

        <div>Category</div>
        <DxSpinEdit @bind-Value="prod.CategoryId" />

        <div>Discontinued</div>
        <DxCheckBox @bind-Checked="prod.Discontinued" />

        <div style="color:red">@MyErrorMessage</div>
    </EditFormTemplate>
</DxGrid>

@code {
    const string ProductsUrl = "https://localhost:31388/api/Products/";
    List<Products> Products { get; set; }
    string MyErrorMessage { get; set; }

    protected override async Task OnInitializedAsync() {
        Products = await LoadDataAsync();
    }
    void Grid_EditStart(GridEditStartEventArgs e) {
        MyErrorMessage = null;
    }
    async Task Grid_EditModelSaving(GridEditModelSavingEventArgs e) {
        MyErrorMessage = null;
        var editedProduct = (Products)e.EditModel;
        var httpContent = ConvertProductToHttpContent(editedProduct);
        var reply = e.IsNew == false
            ? await HttpClient.PutAsync(ProductsUrl + editedProduct.ProductId, httpContent)
            : await HttpClient.PostAsync(ProductsUrl, httpContent);
        if (reply.IsSuccessStatusCode) 
            Products = await LoadDataAsync();
        else {
            e.Cancel = true;
            MyErrorMessage = await reply.Content.ReadAsStringAsync();
        }
    }
    async Task Grid_DataItemDeleting(GridDataItemDeletingEventArgs e) {
        var reply = await HttpClient.DeleteAsync(ProductsUrl + (e.DataItem as Products).ProductId);
        if (reply.IsSuccessStatusCode) 
            Products = await LoadDataAsync();
    }
    async Task<List<Products>> LoadDataAsync() {
        var stream = await HttpClient.GetStreamAsync(ProductsUrl);
        return await JsonSerializer.DeserializeAsync<List<Products>>(stream, new JsonSerializerOptions() { PropertyNameCaseInsensitive = true });
    }
    HttpContent ConvertProductToHttpContent(Products product) {
        var content = JsonSerializer.Serialize<Products>(product);
        return new StringContent(content, System.Text.Encoding.UTF8, "application/json");
    }
}

